import 'dart:math';
import 'package:flutter/material.dart';

// ‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
class DailyHoroscope {
  final String career; // ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
  final String finance; // ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
  final String love; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å

  DailyHoroscope({required this.career, required this.finance, required this.love});
}

// Dataset ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ
final List<DailyHoroscope> horoscopePool = [
  DailyHoroscope(career: "‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤", finance: "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏î‡∏µ‡πÜ", love: "‡∏Ñ‡∏ô‡πÇ‡∏™‡∏î‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏ö‡∏Ñ‡∏ô‡∏ñ‡∏π‡∏Å‡πÉ‡∏à‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"),
  DailyHoroscope(career: "‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô", finance: "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°", love: "‡∏Ñ‡∏ô‡πÇ‡∏™‡∏î‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏≠‡∏ö‡∏ä‡∏≠‡∏ö"),
  DailyHoroscope(career: "‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏°‡∏∑‡∏≠", finance: "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô", love: "‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì"),
  DailyHoroscope(career: "‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", finance: "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", love: "‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì"),
  DailyHoroscope(career: "‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏î‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß", finance: "‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏±‡∏ß", love: "‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"),
  DailyHoroscope(career: "‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏î‡∏ó‡∏ô‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞", finance: "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞", love: "‡∏Ñ‡∏ô‡πÇ‡∏™‡∏î‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏£‡∏±‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢"),
  DailyHoroscope(career: "‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å", finance: "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô", love: "‡∏Ñ‡∏π‡πà‡∏£‡∏±‡∏Å‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"),
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
DailyHoroscope getRandomHoroscope() {
  final random = Random();
  return horoscopePool[random.nextInt(horoscopePool.length)];
}

class DailyHoroscopePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.purple[800],
        title: Text("‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", style: TextStyle(color: Colors.white)),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text("‡∏™‡∏∏‡πà‡∏°‡∏î‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
            SizedBox(height: 16),
            Expanded(
              child: GridView.count(
                crossAxisCount: 3,
                mainAxisSpacing: 16,
                crossAxisSpacing: 16,
                children: List.generate(days.length, (index) {
                  return buildDayButton(context, days[index]);
                }),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget buildDayButton(BuildContext context, DayInfo day) {
    return Column(
      children: [
        GestureDetector(
          onTap: () {
            // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ô
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => HoroscopeDetailPage(day: day.name, dayColor: day.color),
              ),
            );
          },
          child: Container(
            width: 80,
            height: 80,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: day.color.withOpacity(0.2),
              border: Border.all(color: day.color, width: 3),
            ),
            child: Center(
              child: Text(
                day.shortName,
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: day.color),
              ),
            ),
          ),
        ),
        SizedBox(height: 8),
        Text(day.name, style: TextStyle(fontSize: 16)),
      ],
    );
  }
}

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
class HoroscopeDetailPage extends StatelessWidget {
  final String day;
  final Color dayColor;

  HoroscopeDetailPage({required this.day, required this.dayColor});

  @override
  Widget build(BuildContext context) {
    // ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
    final DailyHoroscope horoscope = getRandomHoroscope();

    return Scaffold(
      backgroundColor: Colors.grey[200], // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÜ
      appBar: AppBar(
        backgroundColor: dayColor,
        title: Text("‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏ß‡∏±‡∏ô $day", style: TextStyle(color: Colors.white)),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô
            Container(
              padding: EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: dayColor.withOpacity(0.2),
                shape: BoxShape.circle,
                border: Border.all(color: dayColor, width: 3),
              ),
              child: Icon(Icons.calendar_today, size: 80, color: dayColor),
            ),
            SizedBox(height: 16),

            // Card ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
            Card(
              elevation: 5,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
              color: Colors.white,
              child: Padding(
                padding: EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text("üíº ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: dayColor)),
                    SizedBox(height: 5),
                    Text(horoscope.career, style: TextStyle(fontSize: 16)),
                    SizedBox(height: 16),

                    Text("üí∞ ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: dayColor)),
                    SizedBox(height: 5),
                    Text(horoscope.finance, style: TextStyle(fontSize: 16)),
                    SizedBox(height: 16),

                    Text("‚ù§Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: dayColor)),
                    SizedBox(height: 5),
                    Text(horoscope.love, style: TextStyle(fontSize: 16)),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á ‡πÜ
class DayInfo {
  final String name;
  final String shortName;
  final Color color;

  DayInfo({required this.name, required this.shortName, required this.color});
}

final List<DayInfo> days = [
  DayInfo(name: "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", shortName: "‡∏≠‡∏≤", color: Colors.red),
  DayInfo(name: "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", shortName: "‡∏à", color: Colors.yellow),
  DayInfo(name: "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", shortName: "‡∏≠", color: Colors.pink),
  DayInfo(name: "‡∏û‡∏∏‡∏ò", shortName: "‡∏û", color: Colors.green),
  DayInfo(name: "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", shortName: "‡∏û‡∏§", color: Colors.orange),
  DayInfo(name: "‡∏®‡∏∏‡∏Å‡∏£‡πå", shortName: "‡∏®", color: Colors.blue),
  DayInfo(name: "‡πÄ‡∏™‡∏≤‡∏£‡πå", shortName: "‡∏™", color: Colors.purple),
];

void main() {
  runApp(MaterialApp(
    debugShowCheckedModeBanner: false,
    home: DailyHoroscopePage(),
  ));
}
